//go:generate go run main.go --dir-shaders /app/shaders/ --output /app/gen/shader --package-name shader

package main

import (
	"flag"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"
)

var (
	dirShaders  string
	outputPath  string
	packageName string
)

func init() {
	flag.StringVar(&dirShaders, "dir-shaders", "", "Shader files directory")
	flag.StringVar(&outputPath, "output", "", "Output path for generated package")
	flag.StringVar(&packageName, "package-name", "", "Package name for generated package")
	flag.Parse()

	if dirShaders == "" {
		panic("dir-shaders missing")
	}
	if outputPath == "" {
		panic("output missing")
	}
	if packageName == "" {
		panic("pkg-name missing")
	}
	os.RemoveAll(outputPath)
	os.MkdirAll(outputPath, os.ModePerm)
}

const templateString = `
// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package {{ .Package }}

var Shaders = map[string]string{
	{{ range $key, $value := .Shaders }}` +
	"\"{{ $key }}\": `{{ $value }}`," +
	`{{ end }}
}
`

var packageTemplate = template.Must(template.New("").Parse(templateString))

func main() {
	// key: path relative to dirShaders, value: shader code
	shaders := make(map[string]string)

	err := filepath.Walk(dirShaders, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			log.Fatal(err)
		}

		if info.IsDir() {
			return nil
		}

		b, err := ioutil.ReadFile(path)
		if err != nil {
			log.Fatal(err)
		}

		pathRelative := strings.TrimPrefix(path, dirShaders)

		shaders[pathRelative] = string(b)

		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	f, err := os.Create(filepath.Join(outputPath, "shaders.go"))
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	err = packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Package   string
		Shaders   map[string]string
	}{
		Timestamp: time.Now(),
		Package:   packageName,
		Shaders:   shaders,
	})
	if err != nil {
		log.Fatal(err)
	}
}
